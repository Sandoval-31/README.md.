CLASE ALUMNO:

package sv.edu.udb;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Entity
@Table(name = "alumnos")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Alumno {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String nombre;

    @Column(nullable = false)
    private String apellido;

    @ManyToOne
    @JoinColumn(name = "id_materia", nullable = false)
    private Materia materia;

    // Constructor con tres argumentos
    public Alumno(String nombre, String apellido, Materia materia) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.materia = materia;
    }
}

ALUMNOREPOSITORY:

package sv.edu.udb;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AlumnoRepository extends JpaRepository<Alumno, Long> {
}

CLASE MATERIA:

package sv.edu.udb;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Entity
@Table(name = "materias")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Materia {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String nombre;

    //Constructor que recibe el nombre de la materia
    public Materia(String nombre) {
        this.nombre = nombre;
    }
}

MATERIAREPOSITORY:

package sv.edu.udb;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MateriaRepository extends JpaRepository<Materia, Long> {
}

APLICATION.PROPERTIES:

spring.application.name=DESAFIO
spring.datasource.url=jdbc:h2:mem:guia-jpa
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.defer-datasource-initialization=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

DATA.SQL:

INSERT INTO materias (nombre) VALUES ('Math');
INSERT INTO materias (nombre) VALUES ('Science');
INSERT INTO materias (nombre) VALUES ('History');
INSERT INTO materias (nombre) VALUES ('English');
INSERT INTO materias (nombre) VALUES ('Art');

INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Alice', 'Smith', 1);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Bob', 'Johnson', 2);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Charlie', 'Brown', 3);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('David', 'Lee', 4);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Eve', 'Wilson', 5);

SCHEMA.SQL:

DROP TABLE IF EXISTS alumnos;
DROP TABLE IF EXISTS materias;

CREATE TABLE materias (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
);

CREATE TABLE alumnos (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    id_materia BIGINT NOT NULL,
    FOREIGN KEY (id_materia) REFERENCES materias(id)
);

DATAINSERTIONTEST:

package sv.edu.udb;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Commit;
import org.springframework.transaction.annotation.Transactional;

@SpringBootTest
public class DataInsertionTest {

    @Autowired
    private AlumnoRepository alumnoRepository;

    @Autowired
    private MateriaRepository materiaRepository;

    @Test
    @Transactional
    @Commit
    public void insertTestData() {
        Materia materia1 = new Materia("Physics");
        Materia materia2 = new Materia("Chemistry");

        materiaRepository.save(materia1);
        materiaRepository.save(materia2);

        Alumno alumno1 = new Alumno("John", "Doe", materia1);
        Alumno alumno2 = new Alumno("Jane", "Smith", materia2);

        alumnoRepository.save(alumno1);
        alumnoRepository.save(alumno2);
    }
}
