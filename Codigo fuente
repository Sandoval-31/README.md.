Class AuthController:

package sv.edu.sv.Controller;
import sv.edu.sv.Security.JwtUtil;
import sv.edu.sv.Security.JwtFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.*;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
public class AuthController {
    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private sv.edu.sv.Security.CustomUserDetailsService userDetailsService;

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> user) {
        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(user.get("username"), user.get("password"))
            );
        } catch (BadCredentialsException e) {
            return ResponseEntity.status(401).body("Credenciales inv√°lidas");
        }

        final UserDetails userDetails = userDetailsService.loadUserByUsername(user.get("username"));
        final String token = jwtUtil.generateToken(userDetails.getUsername());

        return ResponseEntity.ok(Map.of("token", token));
    }
}

Class GestionController:

package sv.edu.sv.Controller;
import lombok.Data;
import sv.edu.sv.Model.Alumnos;
import sv.edu.sv.Model.Materias;
import sv.edu.sv.Repository.AlumnoRepository;
import sv.edu.sv.Repository.MateriaRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api")
@Data
public class GestionController {
    private final AlumnoRepository alumnoRepository;
    private final MateriaRepository materiaRepository;

    public GestionController(AlumnoRepository alumnoRepository, MateriaRepository materiaRepository) {
        this.alumnoRepository = alumnoRepository;
        this.materiaRepository = materiaRepository;
    }

    // --- ALUMNOS ---

    @GetMapping("/alumnos")
    public List<Alumnos> listarAlumnos() {
        return alumnoRepository.findAll();
    }

    @PostMapping("/alumnos")
    public Alumnos agregarAlumno(@RequestBody Alumnos alumno) {
        return alumnoRepository.save(alumno);
    }

    @PutMapping("/alumnos/{id}")
    public ResponseEntity<?> actualizarAlumno(@PathVariable Long id, @RequestBody Alumnos alumno) {
        Optional<Alumnos> optionalAlumno = alumnoRepository.findById(id);
        if (optionalAlumno.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        Alumnos a = optionalAlumno.get();
        a.setNombre(alumno.getNombre());
        a.setApellido(alumno.getApellido());
        alumnoRepository.save(a);
        return ResponseEntity.ok(a);
    }

    @DeleteMapping("/alumnos/{id}")
    public ResponseEntity<?> eliminarAlumno(@PathVariable Long id) {
        if (!alumnoRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        alumnoRepository.deleteById(id);
        return ResponseEntity.ok("Alumno eliminado");
    }

    // --- MATERIAS ---

    @GetMapping("/materias")
    public List<Materias> listarMaterias() {
        return materiaRepository.findAll();
    }

    @PostMapping("/materias")
    public Materias agregarMateria(@RequestBody Materias materia) {
        return materiaRepository.save(materia);
    }

    @PutMapping("/materias/{id}")
    public ResponseEntity<?> actualizarMateria(@PathVariable Long id, @RequestBody Materias materia) {
        Optional<Materias> optionalMateria = materiaRepository.findById(id);
        if (optionalMateria.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        Materias m = optionalMateria.get();
        m.setNombre(materia.getNombre());
        materiaRepository.save(m);
        return ResponseEntity.ok(m);
    }

    @DeleteMapping("/materias/{id}")
    public ResponseEntity<?> eliminarMateria(@PathVariable Long id) {
        if (!materiaRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        materiaRepository.deleteById(id);
        return ResponseEntity.ok("Materia eliminada");
    }
}
