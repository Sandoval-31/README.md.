CLASE ALUMNO:

package sv.edu.udb;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Entity
@Table(name = "alumnos")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Alumno {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String nombre;

    @Column(nullable = false)
    private String apellido;

    @ManyToOne
    @JoinColumn(name = "id_materia", nullable = false)
    private Materia materia;

    // Constructor con tres argumentos
    public Alumno(String nombre, String apellido, Materia materia) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.materia = materia;
    }
}

ALUMNOREPOSITORY:

package sv.edu.udb;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AlumnoRepository extends JpaRepository<Alumno, Long> {
}

CLASE MATERIA:

package sv.edu.udb;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Entity
@Table(name = "materias")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Materia {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String nombre;

    //Constructor que recibe el nombre de la materia
    public Materia(String nombre) {
        this.nombre = nombre;
    }
}

MATERIAREPOSITORY:

package sv.edu.udb;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MateriaRepository extends JpaRepository<Materia, Long> {
}

APLICATION.PROPERTIES:

spring.application.name=DESAFIO
spring.datasource.url=jdbc:h2:mem:guia-jpa
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.defer-datasource-initialization=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

DATA.SQL:

INSERT INTO materias (nombre) VALUES ('Math');
INSERT INTO materias (nombre) VALUES ('Science');
INSERT INTO materias (nombre) VALUES ('History');
INSERT INTO materias (nombre) VALUES ('English');
INSERT INTO materias (nombre) VALUES ('Art');

INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Alice', 'Smith', 1);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Bob', 'Johnson', 2);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Charlie', 'Brown', 3);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('David', 'Lee', 4);
INSERT INTO alumnos (nombre, apellido, id_materia) VALUES ('Eve', 'Wilson', 5);

SCHEMA.SQL:

DROP TABLE IF EXISTS alumnos;
DROP TABLE IF EXISTS materias;

CREATE TABLE materias (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
);

CREATE TABLE alumnos (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    id_materia BIGINT NOT NULL,
    FOREIGN KEY (id_materia) REFERENCES materias(id)
);

DATAINSERTIONTEST:

package sv.edu.udb;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Commit;
import org.springframework.transaction.annotation.Transactional;

@SpringBootTest
public class DataInsertionTest {

    @Autowired
    private AlumnoRepository alumnoRepository;

    @Autowired
    private MateriaRepository materiaRepository;

    @Test
    @Transactional
    @Commit
    public void insertTestData() {
        Materia materia1 = new Materia("Physics");
        Materia materia2 = new Materia("Chemistry");

        materiaRepository.save(materia1);
        materiaRepository.save(materia2);

        Alumno alumno1 = new Alumno("John", "Doe", materia1);
        Alumno alumno2 = new Alumno("Jane", "Smith", materia2);

        alumnoRepository.save(alumno1);
        alumnoRepository.save(alumno2);
    }
}

CLASE ALUMNO REQUEST DTO:
package sv.edu.udb.controller.request;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class AlumnoRequestDTO {
    @NotBlank(message = "Nombre es obligatorio")
    private String nombre;

    @NotBlank(message = "Apellido es obligatorio")
    private String apellido;

    @NotNull(message = "ID de materia es obligatorio")
    private Long idMateria;
}

CLASE ALUMNO CONTROLLER: 

package sv.edu.udb.controller;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sv.edu.udb.controller.request.AlumnoRequestDTO;
import sv.edu.udb.controller.response.AlumnoResponseDTO;
import sv.edu.udb.service.AlumnoService;
import java.util.List;

@RestController
@RequestMapping("/api/alumnos")
public class AlumnoController {
    private final AlumnoService alumnoService;

    public AlumnoController(AlumnoService alumnoService) {
        this.alumnoService = alumnoService;
    }

    @GetMapping
    public ResponseEntity<List<AlumnoResponseDTO>> getAllAlumnos() {
        return ResponseEntity.ok(alumnoService.getAllAlumnos());
    }

    @PostMapping
    public ResponseEntity<AlumnoResponseDTO> createAlumno(@RequestBody AlumnoRequestDTO request) {
        return new ResponseEntity<>(alumnoService.createAlumno(request), HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<AlumnoResponseDTO> getAlumnoById(@PathVariable Long id) {
        return ResponseEntity.ok(alumnoService.getAlumnoById(id));
    }
}

CLASE ALUMNO RESPONSE DTO:

package sv.edu.udb.controller.response;
import lombok.Data;

@Data
public class AlumnoResponseDTO {
    private Long id;
    private String nombre;
    private String apellido;
    private String materia;
}

CLASE GLOBAL EXEPTION HANDLER:

package sv.edu.udb.exception;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<String> handleResourceNotFound(ResourceNotFoundException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
    }
}

CLASE RESOURCE NOT FOUND EXEPTION:

package sv.edu.udb.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

CLASE ALUMNO SERVICE IMPL:

package sv.edu.udb.service.impl;
import org.springframework.stereotype.Service;
import sv.edu.udb.controller.request.AlumnoRequestDTO;
import sv.edu.udb.controller.response.AlumnoResponseDTO;
import sv.edu.udb.Alumno;
import sv.edu.udb.Materia;
import sv.edu.udb.exception.ResourceNotFoundException;
import sv.edu.udb.AlumnoRepository;
import sv.edu.udb.MateriaRepository;
import sv.edu.udb.service.AlumnoService;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class AlumnoServiceImpl implements AlumnoService {
    private final AlumnoRepository alumnoRepository;
    private final MateriaRepository materiaRepository;

    public AlumnoServiceImpl(AlumnoRepository alumnoRepository, MateriaRepository materiaRepository) {
        this.alumnoRepository = alumnoRepository;
        this.materiaRepository = materiaRepository;
    }

    @Override
    public List<AlumnoResponseDTO> getAllAlumnos() {
        return alumnoRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @Override
    public AlumnoResponseDTO createAlumno(AlumnoRequestDTO request) {
        Materia materia = materiaRepository.findById(request.getIdMateria())
                .orElseThrow(() -> new ResourceNotFoundException("Materia no encontrada"));

        Alumno alumno = new Alumno();
        alumno.setNombre(request.getNombre());
        alumno.setApellido(request.getApellido());
        alumno.setMateria(materia);

        return convertToDTO(alumnoRepository.save(alumno));
    }

    @Override
    public AlumnoResponseDTO getAlumnoById(Long id) {
        Alumno alumno = alumnoRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Alumno no encontrado"));
        return convertToDTO(alumno);
    }

    private AlumnoResponseDTO convertToDTO(Alumno alumno) {
        AlumnoResponseDTO dto = new AlumnoResponseDTO();
        dto.setId(alumno.getId());
        dto.setNombre(alumno.getNombre());
        dto.setApellido(alumno.getApellido());
        dto.setMateria(alumno.getMateria().getNombre());
        return dto;
    }
}

INTERFAZ ALUMNO SERVICE:

package sv.edu.udb.service;
import sv.edu.udb.controller.request.AlumnoRequestDTO;
import sv.edu.udb.controller.response.AlumnoResponseDTO;
import java.util.List;

public interface AlumnoService {
    List<AlumnoResponseDTO> getAllAlumnos();
    AlumnoResponseDTO createAlumno(AlumnoRequestDTO request);
    AlumnoResponseDTO getAlumnoById(Long id);
}
